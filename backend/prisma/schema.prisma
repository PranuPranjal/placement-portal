// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  password  String
  role      String
  companyId Int?    // Optional reference to company for company users
  company   Company? @relation(fields: [companyId], references: [id])
}

model Student {
  id           Int           @id @default(autoincrement())
  name         String
  rollNumber   Int?
  registrationNumber Int?
  email        String        @unique
  branch       Branch        @relation(fields: [branchId], references: [id])
  branchId     Int
  XPercentage  Float?
  XIIPercentage Float?
  cgpa         Float
  cvPath       String?       // Path to uploaded CV file
  photoPath    String?       // Path to uploaded photo file
  aadharPath   String?       // Path to uploaded aadhar file
  ugMarksheetPath String?       // Path to uploaded UG marks file
  xMarksheetPath String?       // Path to uploaded X marks file
  xiiMarksheetPath String?       // Path to uploaded XII marks file
  applications Application[]
}

model Branch {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  students  Student[]
  allowedIn CompanyAllowedBranch[]
}

model Company {
  id              Int                     @id @default(autoincrement())
  name            String
  password        String?                // Optional password for existing companies
  role            String
  salary          Float
  cgpaCriteria    Float                  // CGPA eligibility
  deadline        DateTime               // Application deadline
  description     String?
  filePath        String?                // Path to uploaded company file
  allowedBranches CompanyAllowedBranch[]
  applications    Application[]
  users           User[]                 // Users associated with this company
}

model CompanyAllowedBranch {
  id         Int     @id @default(autoincrement())
  company    Company @relation(fields: [companyId], references: [id])
  companyId  Int
  branch     Branch  @relation(fields: [branchId], references: [id])
  branchId   Int

  @@unique([companyId, branchId])
}

model Application {
  id         Int                @id @default(autoincrement())
  student    Student            @relation(fields: [studentId], references: [id])
  studentId  Int
  company    Company            @relation(fields: [companyId], references: [id])
  companyId  Int
  role       String?            // Role applied for
  status     ApplicationStatus @default(PENDING)

  @@unique([studentId, companyId])
}

enum ApplicationStatus {
  PENDING
  SELECTED
  REJECTED
}

